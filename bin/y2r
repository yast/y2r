#!/usr/bin/env ruby

require "docopt"

require File.expand_path(File.dirname(__FILE__) + "/../lib/y2r")

doc = <<-EOT
Y2R -- transpiler translating YCP code into Ruby

Usage: y2r [--include-path <path> ...] [--module-path <path> ...] [options]
           [<ycp_file>] [<ruby_file>]

Options:
  -y, --ycpc <file>          Location of the ycpc interpreter to use.
  -I, --include-path <path>  Path where to find included files.
  -M, --module-path <path>   Path where to find modules.
  -v, --version              Print version information and exit.
  -h, --help                 Print help and exit.
EOT

begin
  options = Docopt::docopt(doc, :help => true, :version => Y2R::VERSION)

  ycp_file  = options["<ycp_file>"]
  ruby_file = options["<ruby_file>"]

  if !ycp_file && !ruby_file
    input_stream  = $stdin
    output_stream = $stdout
  else
    ruby_file ||= ycp_file.sub(/\.[^.]*$/, ".rb")
    input_stream  = File.open(ycp_file,  "r")
    output_stream = File.open(ruby_file, "w")
  end

  compile_options = {
    :ycpc          => options["--ycpc"]         || ENV["Y2R_YCPC"],
    :module_paths  => options["--module-path"]  || ENV["Y2R_MODULE_PATH"].split(":"),
    :include_paths => options["--include-path"] || ENV["Y2R_INCLUDE_PATH"].split(":"),
    :filename      => ycp_file
  }

  output_stream.write(Y2R.compile(input_stream.read, compile_options))
  output_stream.write("\n")

  input_stream.close
  output_stream.close
rescue Docopt::Exit => e
  puts e.message
end
