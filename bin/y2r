#!/usr/bin/env ruby
# encoding: utf-8

require "docopt"

require File.expand_path(File.dirname(__FILE__) + "/../lib/y2r")

doc = <<-EOT
Y2R -- transpiler translating YCP code into Ruby

Usage: y2r [--include-path <path> ...] [--module-path <path> ...] [options]
           [<ycp_file>] [<ruby_file>]

Options:
  -I, --include-path <path>        Path where to find included files.
  -M, --module-path <path>         Path where to find modules.
      --export-private             Export also private symbols from translated modules.
      --as-include-file            Compile as include file.
      --extract-file <file>        Compile only code of specified included file.
      --report-file <file>         Report specified file as the compiled one.
  -x, --xml                        Print just XML emitted by ycpc.
  -v, --version                    Print version information and exit.
  -h, --help                       Print help and exit.
EOT

begin
  options = Docopt::docopt(doc, :help => true, :version => Y2R::VERSION)

  ycp_file  = options["<ycp_file>"]
  ruby_file = options["<ruby_file>"]

  if !ycp_file && !ruby_file
    input_stream  = $stdin
    output_stream = $stdout
  else
    if !ruby_file
      extension = options["--xml"] ? ".xml" : ".rb"
      ruby_file = ycp_file.sub(/\.[^.]*$/, extension)
    end

    input_stream  = File.open(ycp_file,  "r")
    output_stream = File.open(ruby_file, "w")
  end

  module_paths = if options["--module-path"]
    options["--module-path"]
  else
    ENV["Y2R_MODULE_PATH"] ? ENV["Y2R_MODULE_PATH"].split(":") : nil
  end

  include_paths = if options["--include-path"]
    options["--include-path"]
  else
    ENV["Y2R_INCLUDE_PATH"] ? ENV["Y2R_INCLUDE_PATH"].split(":") : nil
  end

  compile_options = {
    :module_paths              => module_paths,
    :include_paths             => include_paths,
    :export_private            => options["--export-private"],
    :as_include_file           => options["--as-include-file"],
    :extracted_file            => options["--extract-file"],
    :reported_file             => options["--report-file"],
    :xml                       => options["--xml"],
    :filename                  => ycp_file
  }

  output_stream.write(Y2R.compile(input_stream.read, compile_options))
  output_stream.write("\n")

  input_stream.close
  output_stream.close
rescue Docopt::Exit => e
  $stderr.puts e.message
end
